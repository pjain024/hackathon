import org.yaml.snakeyaml.Yaml;
import java.util.Map;

public class RuleApplier {

    public static String applyRulesAndGetComment(Map<String, Object> jsonData, Map<String, Object> rules) {
        for (String ruleName : rules.keySet()) {
            Map<String, Object> rule = (Map<String, Object>) rules.get(ruleName);
            if (isRuleSatisfied(jsonData, rule)) {
                return (String) ((Map<String, Object>) rule.get("COMMENT")).get("VALUE");
            }
        }
        return ""; // No rule matched
    }

    private static boolean isRuleSatisfied(Map<String, Object> jsonData, Map<String, Object> rule) {
        for (String field : rule.keySet()) {
            if (!"COMMENT".equals(field)) {
                Object fieldValue = getFieldFromJson(jsonData, field);
                if (fieldValue != null) {
                    Map<String, Object> fieldDetails = (Map<String, Object>) rule.get(field);
                    String operator = (String) fieldDetails.get("OPERATOR");
                    String expectedValue = (String) ((Map<String, Object>) fieldDetails.get("VALUE")).get("DATA");
                    if (!applyFilter(fieldValue, operator, expectedValue)) {
                        return false;
                    }
                } else {
                    return false; // If the field is missing in the JSON data, the rule is not satisfied
                }
            }
        }
        return true; // All conditions of the rule are satisfied
    }

    // Implement getFieldFromJson and applyFilter methods as described in previous responses
}

private static Object getFieldFromJson(Map<String, Object> jsonData, String fieldPath) {
    String[] fieldNames = fieldPath.split("\\.");
    Map<String, Object> currentObject = jsonData;

    for (String fieldName : fieldNames) {
        if (currentObject.containsKey(fieldName)) {
            Object fieldValue = currentObject.get(fieldName);
            if (fieldValue instanceof Map) {
                currentObject = (Map<String, Object>) fieldValue;
            } else {
                return fieldValue;
            }
        } else {
            return null; // Field not found
        }
    }
    return null;
}
private static boolean applyFilter(Object fieldValue, String operator, String expectedValue) {
    if ("nan".equalsIgnoreCase(expectedValue)) {
        expectedValue = ""; // Treat "nan" as blank
    }

    if (fieldValue instanceof String) {
        String fieldValueString = (String) fieldValue;
        switch (operator) {
            case "EQUALS":
                return fieldValueString.equals(expectedValue);
            // Add more operators as needed
            default:
                return false;
        }
    }
    return false; // Field value doesn't match expected type
}
