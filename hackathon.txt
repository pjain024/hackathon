private boolean isFieldSatisfied(Object jsonData, Object ruleData) {
    // Check if jsonData and ruleData are both maps
    if (!(jsonData instanceof Map) || !(ruleData instanceof Map)) {
        return false; // Return false if either is not a map
    }
    
    Map<String, Object> jsonMap = (Map<String, Object>) jsonData;
    Map<String, Object> ruleMap = (Map<String, Object>) ruleData;

    // Iterate through each key-value pair in ruleData
    for (Map.Entry<String, Object> entry : ruleMap.entrySet()) {
        String fieldName = entry.getKey();
        Object expectedValue = entry.getValue();
        
        // Check if jsonData contains the field
        if (!jsonMap.containsKey(fieldName)) {
            return false;
        }
        
        Object jsonValue = jsonMap.get(fieldName);

        // Recursively check nested structures
        if (jsonValue instanceof Map && expectedValue instanceof Map) {
            if (!isFieldSatisfied(jsonValue, expectedValue)) {
                return false;
            }
        } else {
            // Perform direct comparison
            if (!jsonValue.equals(expectedValue)) {
                return false;
            }
        }
    }
    
    // All key-value pairs in ruleData matched in jsonData
    return true;
}
