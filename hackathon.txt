public class RuleFilterController {

    public String applyRulesAndGetComment(Map<String, Object> jsonData, Map<String, Map<String, Map<String, Object>>> rules) {
        for (Map.Entry<String, Map<String, Map<String, Object>>> entry : rules.entrySet()) {
            if (isRuleSatisfied(jsonData, entry.getValue())) {
                return (String) entry.getValue().get("comment").get("value");
            }
        }
        return "No matching rule found";
    }

    private boolean isRuleSatisfied(Map<String, Object> jsonData, Map<String, Map<String, Object>> rule) {
        for (Map.Entry<String, Map<String, Object>> fieldEntry : rule.entrySet()) {
            String fieldName = fieldEntry.getKey();
            if (!jsonData.containsKey(fieldName)) {
                return false;
            }
            Map<String, Object> fieldData = fieldEntry.getValue();
            Object jsonValue = jsonData.get(fieldName);
            if (!isFieldSatisfied(jsonValue, fieldData)) {
                return false;
            }
        }
        return true;
    }

    private boolean isFieldSatisfied(Object jsonValue, Map<String, Object> fieldData) {
        String operator = (String) fieldData.get("operator");
        Object expectedValue = fieldData.get("value");
        switch (operator) {
            case "equals":
                return jsonValue.equals(expectedValue);
            // Add more operators as needed
            default:
                return false;
        }
    }




public String applyRulesAndGetComment(Map<String, Object> jsonData, Map<String, Object> rules) {
    for (Map.Entry<String, Object> entry : rules.entrySet()) {
        if (entry.getValue() instanceof Map) {
            Map<String, Object> rule = (Map<String, Object>) entry.getValue();
            if (isRuleSatisfied(jsonData, rule)) {
                return (String) rule.get("comment");
            }
        }
    }
    return "No matching rule found";
}
private boolean isRuleSatisfied(Map<String, Object> jsonData, Map<String, Object> rule) {
    for (Map.Entry<String, Object> fieldEntry : rule.entrySet()) {
        String fieldName = fieldEntry.getKey();
        if (!jsonData.containsKey(fieldName)) {
            return false;
        }
        Object jsonValue = jsonData.get(fieldName);
        Object expectedValue = fieldEntry.getValue();
        if (!isFieldSatisfied(jsonValue, expectedValue)) {
            return false;
        }
    }
    return true;
}
